Given an array of integers arr of even length, return true if and only if it is possible to reorder it such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2.

 

Example 1:

Input: arr = [3,1,3,6]
Output: false
Example 2:

Input: arr = [2,1,2,6]
Output: false
Example 3:

Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].
Example 4:

Input: arr = [1,2,4,16,8,4]
Output: false
 

Constraints:

0 <= arr.length <= 3 * 104
arr.length is even.
-105 <= arr[i] <= 105

class Solution {
public:
    bool canReorderDoubled(vector<int>& arr) {
        int sz = arr.size();
        int c=0;
        unordered_map<int,int> mp;
        
        for(int &v:arr) mp[v]++;
        
        sort(arr.begin(),arr.end());
        
        for(int i=0;i<sz;i++){
            if(mp.at(arr[i])==0)    continue;
            
            if(arr[i]==0){
                if(mp.at(0)>=2){
                    mp[0]-=2;   
                    ++c;
                }
            }
            else if(mp.find(2*arr[i])!=mp.end() && mp.at(2*arr[i])!=0){
                mp[arr[i]]--;
                mp[2*arr[i]]--;
                ++c;
            }
        }
        
        return c==sz/2;
    }
};
