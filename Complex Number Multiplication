A complex number can be represented as a string on the form "real+imaginaryi" where:

real is the real part and is an integer in the range [-100, 100].
imaginary is the imaginary part and is an integer in the range [-100, 100].
i2 == -1.
Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.

 

Example 1:

Input: num1 = "1+1i", num2 = "1+1i"
Output: "0+2i"
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.
Example 2:

Input: num1 = "1+-1i", num2 = "1+-1i"
Output: "0+-2i"
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.
 

Constraints:

num1 and num2 are valid complex numbers.

//cpp my solution using split via delimmiter

class Solution {
    const string delim = "+";
public:
    pair<int,int> split(string s){
        string a1 = s.substr(0, s.find(delim));
        
        s.erase(0, s.find(delim) + delim.length());
        cout<<s<<endl;
        string a2 = s.substr(0,s.length()-1);
        
        cout<<a1<<" "<<a2<<endl;
        return {stoi(a1), stoi(a2)};
    }
    string complexNumberMultiply(string num1, string num2) {
        pair<int,int> p = split(num1);
        int a1 = p.first;
        int a2 = p.second;
        
        p = split(num2);
        int b1 = p.first;
        int b2 = p.second;
        
        int f1 = a1*b1-(a2*b2);
        int f2 = a1*b2+a2*b1;
        
        return to_string(f1)+"+"+to_string(f2)+"i";
    }
};
