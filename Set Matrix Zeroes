Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

//cpp my soliution 
//But this uses O(mn) space


class Solution {
    vector<vector<bool>> vis;
    vector<vector<int>> mt;
    int m,n;
public:
    void dfs(int i,int j){
        if(vis[i][j])   return;
        
        vis[i][j]=true;
        for(int a=0;a<n;a++){
            if(mt[i][a]==0){
                dfs(i,a);
            }else{
                mt[i][a]=0;
                vis[i][a]=true;
            }
        }
        
        for(int a=0;a<m;a++){
            if(mt[a][j]==0){
                dfs(a,j);
            }else{
                mt[a][j]=0;
                vis[a][j]=true;
            }
        }
    }
    void setZeroes(vector<vector<int>>& mat) {
        mt = mat;
        m = mat.size();
        n = mat[0].size();
        
        vis = vector<vector<bool>>(m,vector<bool>(n,false));
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mt[i][j]==0 && !vis[i][j])
                    dfs(i,j);
            }
        }
        mat = mt;
    }
};
