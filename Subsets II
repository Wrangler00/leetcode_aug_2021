Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10

//cpp backtrack solution
//have implemented after learning from discussion section


class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<int> tmp;
        
        backtrack(nums,ans,tmp,0);
        
        return ans;
    }
    
    void backtrack(vector<int> &nums,vector<vector<int>> &ans, vector<int> &tmp,int start){
        ans.push_back(tmp);
        
        for(int i=start;i<nums.size();i++){
            if(i>start && nums[i]==nums[i-1])   continue;
            tmp.push_back(nums[i]);
            backtrack(nums,ans,tmp,i+1);
            tmp.pop_back();
        }
    }
};
