Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.

//cpp my solution

class Solution {
    const vector<pair<int,int>> loop= {{0,0},{0,3},{0,6},{3,0},{3,3},{3,6},{6,0},{6,3},{6,6}};
public:
    bool isValidSudoku(vector<vector<char>>& b) {
        
        //rows validation
        for(int i=0;i<9;i++){
            int mp[9] = {0};
            for(int j=0;j<9;j++){
                if(b[i][j]=='.')    continue;
                if(mp[b[i][j]-'0'-1])   return false;
                mp[b[i][j]-'0'-1] = 1;
            }
        }
        
        //column validation
        for(int i=0;i<9;i++){
            int mp[9] = {0};
            for(int j=0;j<9;j++){
                if(b[j][i]=='.')    continue;
                if(mp[b[j][i]-'0'-1])   return false;
                mp[b[j][i]-'0'-1] = 1;
            }
        }
        
        for(auto p:loop){
            int mp[9] = {0};
            // cout<<"# :: "<<p.first<<","<<p.second<<endl;
            for(int i=p.first;i<p.first+3;i++){
                for(int j=p.second;j<p.second+3;j++){
                    // cout<<i<<" "<<j<<endl;
                    if(b[i][j]=='.')    continue;
                    if(mp[b[i][j]-'0'-1])   return false;
                    mp[b[i][j]-'0'-1] = 1;
                }
            }
        }
        
        return true;
    }
};
